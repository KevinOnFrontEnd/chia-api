openapi: 3.0.3
info:
  description: "The Chia node and services come with a JSON RPC API server that allows you to access information and control the services. These are accessible via HTTP, WebSockets, or via client SDKs. The ports can be configured in ~/.chia/mainnet/config/config.yaml. The RPC ports should not be exposed to the internet. TLS certificates are used to secure the communication."
  version: 1.2.11
  title: Chia RPC
  termsOfService: https://www.chia.net/assets/legal/Guidelines-for-Using-Chia-Network.pdf
  contact:
    name: Chia Network
    url: https://www.chia.net/
    email: hello@chia.net
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://localhost:8555
    description: Full Node RPC
security:
  - bearerAuth: []
components:
  requestBodies:
    empty:
      $ref: "./requestBodies/empty.yaml#/empty"
    header_hash:
      required: true
      description: the block's header_hash
      content:
        application/json:
          schema:
            type: object
            required:
              - header_hash
            properties:
              header_hash:
                type: string
    start_end:
      required: true
      description: Start and end heights
      content:
        application/json:
          schema:
            type: object
            required:
              - start
              - end
            properties:
              start:
                type: integer
                format: uint32
              end:
                type: integer
                format: uint32
  responses:
    empty:
      $ref: "./responses/empty.yaml#/empty"
  schemas:
    blockchain_state:
      $ref: "./schemas/blockchain_state.yaml#/blockchain_state"
    block_record:
      $ref: "./schemas/block_record.yaml#/block_record"
    connection_info:
      $ref: "./schemas/connection_info.yaml#/connection_info"
    full_block:
      $ref: "./schemas/full_block.yaml#/full_block"
    mempool_item:
      $ref: "./schemas/mempool_item.yaml#/mempool_item"
    node_type:
      $ref: "./schemas/node_type.yaml#/node_type"
    unfinished_header_block:
      $ref: "./schemas/unfinished_header_block.yaml#/unfinished_header_block"
    apiResponse:
      $ref: "./schemas/apiResponse.yaml#/apiResponse"
  securitySchemes:
    bearerAuth:
      $ref: "./securitySchemes/bearerAuth.yaml#/bearerAuth"
tags:
  - name: Full Node
    description: The full node RPC API is exposed, by default, on port 8555. This port must not be exposed publicly for security concerns.
  - name: Connections
    description: Methods for managing connections.
  - name: Blocks
    description: Methods for managing blocks.
  - name: Coins
    description: Methods for managing coins.
  - name: Mempool
    description: Get information about the mempool.
paths:
  /stop_node:
    post:
      tags:
        - Connections
      summary: Stop the node.
      description: Stop the node.
      operationId: stop_node
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          $ref: "#/components/responses/empty"
  /open_connection:
    post:
      tags:
        - Connections
      summary: Add a connection to another node.
      description: Add a connection to another node.
      operationId: open_connection
      requestBody:
        required: true
        description: the address of the connection
        content:
          application/json:
            schema:
              type: object
              required:
                - ip
                - port
              properties:
                ip:
                  type: string
                  format: ipaddress
                port:
                  type: integer
      responses:
        200:
          $ref: "#/components/responses/empty"
  /close_connection:
    post:
      tags:
        - Connections
      summary: Removes a connection.
      description: Removes a connection.
      operationId: close_connection
      requestBody:
        required: true
        description: the node id of the connection
        content:
          application/json:
            schema:
              type: object
              required:
                - node_id
              properties:
                node_id:
                  type: string
      responses:
        200:
          $ref: "#/components/responses/empty"
  /get_connections:
    post:
      tags:
        - Connections
      summary: Retreive the list of connections.
      description: Retreive the list of connections.
      operationId: get_connections
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    items:
                      $ref: "#/components/schemas/connection_info"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_block_record:
    post:
      tags:
        - Blocks
      summary: Retrieves a block record by header hash.
      description: Retrieves a block record by header hash.
      operationId: get_block_record
      requestBody:
        $ref: "#/components/requestBodies/header_hash"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  block_record:
                    $ref: "#/components/schemas/block_record"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_block_records:
    post:
      tags:
        - Blocks
      summary: Retrieves block records in a range.
      description: Retrieves block records in a range
      operationId: get_block_records
      requestBody:
        $ref: "#/components/requestBodies/start_end"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  block_records:
                    type: array
                    items:
                      $ref: "#/components/schemas/block_record"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_block_record_by_height:
    post:
      tags:
        - Blocks
      summary: Retrieves a block record by height.
      description: Retrieves a block record by height (assuming the height <= peak height). Note that not all blocks will have all fields set here (depending on transaction block, finishing sub epoch, etc).
      operationId: get_block_record_by_height
      requestBody:
        required: true
        description: the block height
        content:
          application/json:
            schema:
              type: object
              required:
                - height
              properties:
                height:
                  type: integer
                  format: uint32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  block_record:
                    $ref: "#/components/schemas/block_record"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_block:
    post:
      tags:
        - Blocks
      summary: Retrieves a block by header hash.
      description: Retrieves a block by header hash.
      operationId: get_block
      requestBody:
        $ref: "#/components/requestBodies/header_hash"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  block:
                    $ref: "#/components/schemas/full_block"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_blocks:
    post:
      tags:
        - Blocks
      summary: Get the blocks between a start and end height.
      description: Get the blocks between a start and end height
      operationId: get_blocks
      requestBody:
        $ref: "#/components/requestBodies/start_end"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocks:
                    type: array
                    items:
                      $ref: "#/components/schemas/full_block"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_unfinished_block_headers:
    post:
      tags:
        - Blocks
      summary: Retrieves unfinished block headers.
      description: Retrieves unfinished block headers.
      operationId: get_unfinished_block_headers
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                    items:
                      $ref: "#/components/schemas/unfinished_header_block"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_blockchain_state:
    post:
      tags:
        - Full Node
      summary: Retrieves a summary of the current state of the blockchain and full node.
      description: Retrieves a summary of the current state of the blockchain and full node.
      operationId: get_blockchain_state
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blockchain_state:
                    $ref: "#/components/schemas/blockchain_state"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_network_info:
    post:
      tags:
        - Full Node
      summary: Retrieves some information about the current network.
      operationId: full_node_get_network_info
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - network_name
                  - network_prefix
                properties:
                  network_name:
                    type: string
                  network_prefix:
                    type: string
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_network_space:
    post:
      tags:
        - Full Node
      summary: Retrieves an estimate of total space validating the chain between two block header hashes.
      operationId: get_network_space
      requestBody:
        required: true
        description: The block header hashes
        content:
          application/json:
            schema:
              type: object
              required:
                - newer_block_header_hash
                - older_block_header_hash
              properties:
                newer_block_header_hash:
                  type: string
                older_block_header_hash:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  space:
                    type: integer
                    format: bigint
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_all_mempool_tx_ids:
    post:
      tags:
        - Mempool
      summary: Returns a list of all transaction IDs (spend bundle hashes) in the mempool.
      operationId: get_all_mempool_tx_ids
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tx_ids:
                    type: array
                    items:
                      type: string
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_all_mempool_items:
    post:
      tags:
        - Mempool
      summary: Returns all items in the mempool.
      operationId: get_all_mempool_items
      requestBody:
        $ref: "#/components/requestBodies/empty"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mempool_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/mempool_item"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
  /get_mempool_item_by_tx_id:
    post:
      tags:
        - Mempool
      summary: Returns a specific item from the mempool.
      operationId: get_mempool_item_by_tx_id
      requestBody:
        required: true
        description: The tx id.
        content:
          application/json:
            schema:
              type: object
              required:
                - tx_id
              properties:
                tx_id:
                  type: string
                  format: hex
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mempool_item:
                    $ref: "#/components/schemas/mempool_item"
                allOf:
                  - $ref: "#/components/schemas/apiResponse"
externalDocs:
  description: Find out more about chia
  url: http://chia.net
